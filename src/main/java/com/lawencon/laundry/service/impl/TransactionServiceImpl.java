package com.lawencon.laundry.service.impl;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;

import com.lawencon.laundry.dao.TransactionsDao;
import com.lawencon.laundry.model.Customers;
import com.lawencon.laundry.model.PaymentsType;
import com.lawencon.laundry.model.Profiles;
import com.lawencon.laundry.model.TransactionDetails;
import com.lawencon.laundry.model.Transactions;
import com.lawencon.laundry.service.BaseService;
import com.lawencon.laundry.service.CustomerService;
import com.lawencon.laundry.service.PaymentTypeService;
import com.lawencon.laundry.service.ProfileService;
import com.lawencon.laundry.service.TransactionDetailService;
import com.lawencon.laundry.service.TransactionService;

/**
 * @author Dzaky Fadhilla Guci
 */

@Service
@Transactional
public class TransactionServiceImpl extends BaseService implements TransactionService {

	private TransactionsDao transactionsDao;
	private TransactionDetailService transactionDtlService;
	private PaymentTypeService paymentTypeService;
	private CustomerService customerService;
	private ProfileService profileService;

	@Autowired
	public TransactionServiceImpl(@Qualifier(value = "transaction_jpa") TransactionsDao transactionsDao,
			TransactionDetailService transactionDtlService, PaymentTypeService paymentTypeService,
			CustomerService customerService, ProfileService profileService) {
		this.transactionsDao = transactionsDao;
		this.transactionDtlService = transactionDtlService;
		this.paymentTypeService = paymentTypeService;
		this.customerService = customerService;
		this.profileService = profileService;
	}

	@Override
	public Transactions addTransactions(Transactions transactions, List<TransactionDetails> listDtlTransactions)
			throws Exception {

		validateInputAdd(transactions);

		PaymentsType paymentType = paymentTypeService.getByCode(transactions.getPaymentId());
		Customers customer = customerService.getByCode(transactions.getCustomerId());
		Profiles employee = profileService.getByCode(transactions.getEmployeeId());

		validateFk(paymentType, customer, employee);

		transactions.setPaymentId(paymentType);
		transactions.setCustomerId(customer);
		transactions.setEmployeeId(employee);

		LocalDateTime currentDateTime = LocalDateTime.now();
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("ddMMyy-HHmmss");
		String formattedDateTime = currentDateTime.format(formatter);
		transactions.setLaundryCode(bBuilder("TRX", formattedDateTime).toString());

		transactions.setLaundryTime(currentDateTime);
		Transactions transactionId = transactionsDao.addTransactions(transactions);

		for (TransactionDetails tdtl : listDtlTransactions) {
			tdtl.setHdrId(transactionId);
			Long temp = transactionDtlService.getCountData() + 1;
			tdtl.setDtlCode(bBuilder("DTL", tdtl.getServiceId().getServiceCode(), "0", temp.toString()).toString());
			transactionDtlService.addTransactionDetails(tdtl);
		}

		transactionId = transactionsDao.updateTotalPrice(transactionId);

		return transactionId;

	}

	private void validateFk(PaymentsType paymentType, Customers customer, Profiles employee) throws Exception {
		StringBuilder vldMsg = new StringBuilder("Invalid foreign key ");
		int msgLength = vldMsg.length();

		if (paymentType == null) {
			vldMsg.append(", payment type not found ");
		} else if (customer == null) {
			vldMsg.append(", customer not found ");
		} else if (employee == null) {
			vldMsg.append(", employee profile not found ");
		}

		if (vldMsg.length() > msgLength) {
			throw new Exception(vldMsg.toString());
		}
	}

	private void validateInputAdd(Transactions trx) throws Exception {
		StringBuilder vldMsg = new StringBuilder("Invalid input ");
		int msgLength = vldMsg.length();

		if (trx.getLaundryCode() != null) {
			vldMsg.append(", code generated by system ");
		}

		if (trx.getLaundryTime() != null) {
			vldMsg.append(", time generated by system ");
		}

		if (trx.getTotalPrice() != null) {
			vldMsg.append(", total price generated by system ");
		}

		if (trx.getPaymentId() == null) {
			vldMsg.append(", payment id ");
		}

		if (trx.getCustomerId() == null) {
			vldMsg.append(", customer id ");
		}

		if (trx.getEmployeeId() == null) {
			vldMsg.append(", employee id ");
		}

		if (trx.getId() != null) {
			vldMsg.append(", id must null ");
		}

		if (vldMsg.length() > msgLength) {
			throw new Exception(vldMsg.toString());
		}

	}

	@Override
	public List<Transactions> getAllTransactions() throws Exception {
		return transactionsDao.getAllTransactions();

	}

	@Override
	public void updateData(Transactions transactions) throws Exception {
		validateInputUpdate(transactions);

		Transactions transactionDB = transactionsDao.getById(transactions);
		if (transactionDB == null) {
			throw new Exception("Id not match");
		}

		PaymentsType paymentType = paymentTypeService.getByCode(transactions.getPaymentId());
		Customers customer = customerService.getByCode(transactions.getCustomerId());
		Profiles employee = profileService.getByCode(transactions.getEmployeeId());

		validateFk(paymentType, customer, employee);

		transactions.setPaymentId(paymentType);
		transactions.setCustomerId(customer);
		transactions.setEmployeeId(employee);

		if (transactions.getCustomerId() == null) {
			transactions.setCustomerId(transactionDB.getCustomerId());
		}
		if (transactions.getEmployeeId() == null) {
			transactions.setEmployeeId(transactionDB.getEmployeeId());
		}
		if (transactions.getPaymentId() == null) {
			transactions.setPaymentId(transactionDB.getPaymentId());
		}

		transactionsDao.updateData(transactions);

	}

	private void validateInputUpdate(Transactions transactions) throws Exception {
		StringBuilder vldMsg = new StringBuilder("Invalid foreign key ");
		int msgLength = vldMsg.length();

		if (transactions.getId() == null) {
			vldMsg.append(", id must not null ");
		}

		if (transactions.getLaundryCode() != null) {
			vldMsg.append(", code generated by system ");
		}

		if (transactions.getLaundryTime() != null) {
			vldMsg.append(", time generated by system ");
		}

		if (transactions.getTotalPrice() != null) {
			vldMsg.append(", total price generated by system ");
		}

		if (vldMsg.length() > msgLength) {
			throw new Exception(vldMsg.toString());
		}
	}

}
